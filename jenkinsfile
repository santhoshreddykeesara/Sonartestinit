def getDockerTag(){
        def tag = sh script: 'git rev-parse HEAD', returnStdout: true
        return tag
        }
        

pipeline{
        agent any  
        environment{
	    Docker_tag = getDockerTag()
        }
        
        stages{
              stage('Quality Gate Statuc Check'){
               agent {
                docker {
                image 'maven'
                args '-v $HOME/.m2:/root/.m2'
                }
            }
                  steps{
                      script{
                      withSonarQubeEnv('sonarserver') { 
                      sh "mvn sonar:sonar"
                       }
                      timeout(time: 1, unit: 'HOURS') {
                      def qg = waitForQualityGate()
                      if (qg.status != 'OK') {
                           error "Pipeline aborted due to quality gate failure: ${qg.status}"
                      }
                    }
		            sh "mvn clean install"
                  }
                }  
              }



              stage('Build a Docker Image')
                {
              steps{
                  script{
		            sh 'cp -r ../sonarqubecheck@2/target .'
                    sh 'docker build . -t keesarasanthosh/dockerci:$Docker_tag'
		        withCredentials([string(credentialsId: 'docker_password', variable: 'docker_password')]) {  
				  sh 'docker login -u keesarasanthosh -p $docker_password'
				  sh 'docker push keesarasanthosh/dockerci:$Docker_tag'
			             }
                       }
                    }
                 }
        
              stage('Deploying to Kubernetes using Ansible'){
                steps{
                  script{
                    sh '''final_tag=$(echo $Docker_tag | tr -d ' ')
				            echo ${final_tag}test
				            sed -i "s/docker_tag/$final_tag/g"  deployment.yaml
				            '''
                    ansiblePlaybook become: true, installation: 'ansible', inventory: '/etc/ansible/hosts', playbook: 'ansible.yaml'
                  }
                }
              }
        
        }

}